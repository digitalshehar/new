---
import Layout from './Layout.astro';
import TableOfContents from '../components/TableOfContents.astro';
import RecipeScaling from '../components/RecipeScaling.astro';
import NutritionPanel from '../components/NutritionPanel.astro';
import CookMode from '../components/CookMode.astro';
import RecipeVariations from '../components/RecipeVariations.astro';
import RecipeComments from '../components/RecipeComments.astro';
import SocialShare from '../components/SocialShare.astro';
import RelatedRecipes from '../components/RelatedRecipes.astro';
import RecipeCollections from '../components/RecipeCollections.astro';
import RecipeVideo from '../components/RecipeVideo.astro';
import { Image } from 'astro:assets';

interface Props {
  title: string;
  description: string;
  image: string;
  cookingTime: string;
  prepTime?: string;
  difficulty: string;
  servings: number;
  rating: number;
  totalRatings: number;
  ingredients: string[];
  instructions: string[];
  nutrition: {
    calories: number;
    protein: number;
    carbs: number;
    fat: number;
    fiber: number;
    sugar?: number;
    servingSize?: string;
  };
  variations?: {
    title: string;
    description: string;
    changes: string[];
  }[];
  tips?: string[];
  categories?: string[];
  equipment?: string[];
  author?: string;
  publishDate?: string;
  videoUrl?: string;
  videoThumbnail?: string;
  keywords?: string[];
  metaDescription?: string;
  seasonality?: string[];
  dietaryInfo?: {
    vegetarian?: boolean;
    vegan?: boolean;
    glutenFree?: boolean;
    dairyFree?: boolean;
    nutFree?: boolean;
  };
}

const {
  title,
  description,
  image,
  cookingTime,
  prepTime,
  difficulty,
  servings,
  rating,
  totalRatings,
  ingredients,
  instructions,
  nutrition,
  variations,
  tips,
  categories,
  equipment,
  author,
  publishDate,
  videoUrl,
  videoThumbnail,
  keywords,
  metaDescription,
  seasonality,
  dietaryInfo
} = Astro.props;

const sections = [
  { id: 'ingredients', title: 'Ingredients' },
  { id: 'instructions', title: 'Instructions' },
  { id: 'nutrition', title: 'Nutrition' },
  ...(variations ? [{ id: 'variations', title: 'Variations' }] : []),
  ...(tips ? [{ id: 'tips', title: 'Tips' }] : []),
  ...(videoUrl ? [{ id: 'video', title: 'Video' }] : [])
];
---

<Layout title={title} description={metaDescription || description}>
  <main class="pt-24 pb-16">
    <!-- Hero Section -->
    <div class="relative h-[60vh] min-h-[500px] w-full">
      <div class="absolute inset-0">
        <img
          src={image}
          alt={title}
          class="w-full h-full object-cover"
        />
        <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
      </div>
      <div class="absolute bottom-0 left-0 right-0 p-8 text-white">
        <div class="max-w-7xl mx-auto">
          <h1 class="text-4xl md:text-5xl font-bold mb-4">{title}</h1>
          <p class="text-lg mb-6">{description}</p>
          <div class="flex flex-wrap gap-4 items-center text-sm">
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10 2a.75.75 0 01.75.75v7.5a.75.75 0 01-1.5 0v-7.5A.75.75 0 0110 2zM10 12a.75.75 0 100 1.5.75.75 0 000-1.5z"/>
              </svg>
              {cookingTime}
            </div>
            {prepTime && (
              <div class="flex items-center">
                <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"/>
                </svg>
                Prep: {prepTime}
              </div>
            )}
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
              </svg>
              {rating} ({totalRatings} reviews)
            </div>
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0119 16v1h-6.07zM6 11a5 5 0 015 5v1H1v-1a5 5 0 015-5z"/>
              </svg>
              {servings} servings
            </div>
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9 4.804A7.968 7.968 0 005.5 4c-1.255 0-2.443.29-3.5.804v10A7.969 7.969 0 015.5 14c1.669 0 3.218.51 4.5 1.385A7.962 7.962 0 0114.5 14c1.255 0 2.443.29 3.5.804v-10A7.968 7.968 0 0014.5 4c-1.255 0-2.443.29-3.5.804V12a1 1 0 11-2 0V4.804z"/>
              </svg>
              {difficulty}
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Recipe Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-8">
      <div class="grid grid-cols-1 lg:grid-cols-12 gap-8">
        <!-- Sidebar -->
        <aside class="lg:col-span-3">
          <div class="sticky top-24 space-y-6">
            <TableOfContents sections={sections} />
            
            <!-- Cook Mode Button -->
            <button
              id="start-cook-mode"
              class="w-full bg-jamie-orange text-white rounded-lg py-3 px-4 flex items-center justify-center hover:bg-jamie-orange-dark transition-colors"
            >
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
              </svg>
              Enter Cook Mode
            </button>

            <SocialShare title={title} />
          </div>
        </aside>

        <!-- Main Content -->
        <div class="lg:col-span-9">
          {videoUrl && (
            <section id="video" class="mb-12">
              <h2 class="text-2xl font-bold text-jamie-blue mb-6">Watch how to make it</h2>
              <RecipeVideo
                url={videoUrl}
                thumbnail={videoThumbnail}
              />
            </section>
          )}

          <section id="ingredients" class="mb-12">
            <h2 class="text-2xl font-bold text-jamie-blue mb-6">Ingredients</h2>
            <RecipeScaling servings={servings} />
            <ul class="space-y-2">
              {ingredients.map(ingredient => (
                <li class="flex items-center space-x-2">
                  <input type="checkbox" class="form-checkbox text-jamie-orange h-5 w-5" />
                  <span>{ingredient}</span>
                </li>
              ))}
            </ul>
          </section>

          <section id="instructions" class="mb-12">
            <h2 class="text-2xl font-bold text-jamie-blue mb-6">Instructions</h2>
            <ol class="space-y-6">
              {instructions.map((instruction, index) => (
                <li class="flex items-start">
                  <span class="flex-shrink-0 w-8 h-8 bg-jamie-orange text-white rounded-full flex items-center justify-center mr-4">
                    {index + 1}
                  </span>
                  <div class="flex-1">
                    <p>{instruction}</p>
                  </div>
                </li>
              ))}
            </ol>
          </section>

          <section id="nutrition" class="mb-12">
            <h2 class="text-2xl font-bold text-jamie-blue mb-6">Nutrition Information</h2>
            <NutritionPanel {...nutrition} />
          </section>

          {variations && variations.length > 0 && (
            <section id="variations" class="mb-12">
              <h2 class="text-2xl font-bold text-jamie-blue mb-6">Recipe Variations</h2>
              <RecipeVariations variations={variations} />
            </section>
          )}

          {tips && tips.length > 0 && (
            <section id="tips" class="mb-12">
              <h2 class="text-2xl font-bold text-jamie-blue mb-6">Cooking Tips</h2>
              <ul class="space-y-4">
                {tips.map(tip => (
                  <li class="flex items-start">
                    <svg class="w-6 h-6 text-jamie-orange mr-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
                    </svg>
                    <span>{tip}</span>
                  </li>
                ))}
              </ul>
            </section>
          )}
        </div>
      </div>

      <!-- Related Content -->
      <div class="mt-16">
        <RelatedRecipes currentRecipe={title} categories={categories} />
        <RecipeCollections />
      </div>
    </div>
  </main>

  <!-- Cook Mode -->
  <CookMode
    title={title}
    ingredients={ingredients}
    instructions={instructions}
    servings={servings}
  />

  <script>
    // Initialize Cook Mode
    const cookModeBtn = document.getElementById('start-cook-mode');
    const cookMode = document.getElementById('cook-mode');
    const exitCookMode = document.getElementById('exit-cook-mode');

    cookModeBtn?.addEventListener('click', () => {
      cookMode?.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    });

    exitCookMode?.addEventListener('click', () => {
      cookMode?.classList.add('hidden');
      document.body.style.overflow = '';
    });

    // Handle print functionality
    document.getElementById('print-recipe')?.addEventListener('click', () => {
      window.print();
    });
  </script>
</Layout>

<style is:global>
  @media print {
    .no-print {
      display: none !important;
    }
  }
</style>
