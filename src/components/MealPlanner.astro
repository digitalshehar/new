---
interface Props {
  savedMeals?: {
    id: string;
    day: string;
    mealType: string;
    recipeId: string;
    recipeName: string;
  }[];
}

const { savedMeals = [] } = Astro.props;

const daysOfWeek = [
  'Monday',
  'Tuesday',
  'Wednesday',
  'Thursday',
  'Friday',
  'Saturday',
  'Sunday'
];

const mealTypes = ['Breakfast', 'Lunch', 'Dinner', 'Snacks'];
---

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
  <div class="flex items-center justify-between mb-6">
    <h2 class="text-2xl font-bold text-jamie-blue dark:text-white">Weekly Meal Planner</h2>
    <div class="flex space-x-3">
      <button
        id="generate-shopping-list"
        class="px-4 py-2 bg-jamie-blue text-white rounded-lg hover:bg-jamie-dark-blue transition-colors"
      >
        Generate Shopping List
      </button>
      <button
        id="clear-planner"
        class="px-4 py-2 border border-jamie-blue text-jamie-blue dark:border-jamie-accent-blue dark:text-jamie-accent-blue rounded-lg hover:bg-jamie-blue hover:text-white dark:hover:bg-jamie-accent-blue transition-colors"
      >
        Clear All
      </button>
    </div>
  </div>

  <!-- Meal Planner Grid -->
  <div class="overflow-x-auto">
    <table class="w-full border-collapse">
      <thead>
        <tr>
          <th class="p-3 border-b dark:border-gray-700"></th>
          {mealTypes.map(type => (
            <th class="p-3 border-b dark:border-gray-700 text-left text-jamie-blue dark:text-jamie-accent-blue font-semibold">
              {type}
            </th>
          ))}
        </tr>
      </thead>
      <tbody>
        {daysOfWeek.map(day => (
          <tr>
            <td class="p-3 border-b dark:border-gray-700 font-medium text-jamie-dark-blue dark:text-white">
              {day}
            </td>
            {mealTypes.map(type => {
              const meal = savedMeals.find(m => m.day === day && m.mealType === type);
              return (
                <td class="p-3 border-b dark:border-gray-700">
                  <div 
                    class="min-h-[80px] rounded-lg border-2 border-dashed border-gray-200 dark:border-gray-700 p-2 meal-slot"
                    data-day={day}
                    data-meal-type={type}
                  >
                    {meal ? (
                      <div class="flex flex-col h-full">
                        <span class="font-medium text-jamie-blue dark:text-jamie-accent-blue">{meal.recipeName}</span>
                        <div class="flex mt-2 space-x-2">
                          <button 
                            class="text-sm text-gray-500 hover:text-jamie-orange transition-colors view-recipe"
                            data-recipe-id={meal.recipeId}
                          >
                            View
                          </button>
                          <button 
                            class="text-sm text-gray-500 hover:text-red-500 transition-colors remove-meal"
                            data-meal-id={meal.id}
                          >
                            Remove
                          </button>
                        </div>
                      </div>
                    ) : (
                      <button 
                        class="w-full h-full flex items-center justify-center text-gray-400 hover:text-jamie-blue dark:hover:text-jamie-accent-blue transition-colors add-meal"
                      >
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                        </svg>
                      </button>
                    )}
                  </div>
                </td>
              );
            })}
          </tr>
        ))}
      </tbody>
    </table>
  </div>
</div>

<!-- Recipe Search Modal -->
<div 
  id="recipe-search-modal" 
  class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 hidden z-50"
>
  <div class="bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-2xl">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-semibold">Add Recipe to Meal Plan</h3>
      <button id="close-recipe-search" class="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <div class="mb-4">
      <input 
        type="text" 
        placeholder="Search recipes..."
        class="w-full px-4 py-2 rounded-lg border dark:border-gray-600 dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-jamie-blue dark:focus:ring-jamie-accent-blue"
      />
    </div>

    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 max-h-[400px] overflow-y-auto" id="recipe-search-results">
      <!-- Recipe results will be dynamically inserted here -->
    </div>
  </div>
</div>

<!-- Shopping List Modal -->
<div 
  id="shopping-list-modal" 
  class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 hidden z-50"
>
  <div class="bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-2xl">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-semibold">Shopping List</h3>
      <div class="flex space-x-3">
        <button 
          id="print-shopping-list"
          class="text-jamie-blue dark:text-jamie-accent-blue hover:text-jamie-orange transition-colors"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
          </svg>
        </button>
        <button 
          id="close-shopping-list"
          class="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
    
    <div class="space-y-4" id="shopping-list-content">
      <!-- Shopping list will be dynamically inserted here -->
    </div>
  </div>
</div>

<script>
  // Initialize meal planner functionality
  const addMealButtons = document.querySelectorAll('.add-meal');
  const recipeSearchModal = document.getElementById('recipe-search-modal');
  const closeRecipeSearch = document.getElementById('close-recipe-search');
  const shoppingListModal = document.getElementById('shopping-list-modal');
  const closeShoppingList = document.getElementById('close-shopping-list');
  const generateShoppingList = document.getElementById('generate-shopping-list');
  const clearPlanner = document.getElementById('clear-planner');
  const printShoppingList = document.getElementById('print-shopping-list');

  let selectedSlot = null;

  // Add meal button handlers
  addMealButtons.forEach(button => {
    button.addEventListener('click', (e) => {
      const slot = e.target.closest('.meal-slot');
      selectedSlot = {
        day: slot.dataset.day,
        mealType: slot.dataset.mealType
      };
      recipeSearchModal.classList.remove('hidden');
    });
  });

  // Close modal handlers
  closeRecipeSearch.addEventListener('click', () => {
    recipeSearchModal.classList.add('hidden');
  });

  closeShoppingList.addEventListener('click', () => {
    shoppingListModal.classList.add('hidden');
  });

  // Generate shopping list
  generateShoppingList.addEventListener('click', () => {
    // TODO: Implement shopping list generation
    shoppingListModal.classList.remove('hidden');
  });

  // Print shopping list
  printShoppingList.addEventListener('click', () => {
    window.print();
  });

  // Clear planner
  clearPlanner.addEventListener('click', () => {
    if (confirm('Are you sure you want to clear the meal planner?')) {
      // TODO: Implement clear functionality
    }
  });

  // Close modals when clicking outside
  window.addEventListener('click', (e) => {
    if (e.target === recipeSearchModal) {
      recipeSearchModal.classList.add('hidden');
    }
    if (e.target === shoppingListModal) {
      shoppingListModal.classList.add('hidden');
    }
  });
</script>
