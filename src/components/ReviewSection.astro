---
import RecipeRating from './RecipeRating.astro';
import type { Review } from '../data/recipes';

interface Props {
  reviews?: Review[];
  recipeSlug: string;
}

const { reviews = [], recipeSlug } = Astro.props;
---

<section id="reviews" class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12 border-t border-gray-200 dark:border-gray-700 mt-16">
  <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-8">Reviews</h2>
  
  <!-- User Review Form -->
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8">
    <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Add Your Review</h3>
    <div class="mb-4">
      <label class="block text-gray-700 dark:text-gray-300 mb-2">Your Rating</label>
      <RecipeRating interactive={true} rating={0} />
    </div>
    <div class="mb-4">
      <label for="review-text" class="block text-gray-700 dark:text-gray-300 mb-2">Your Review</label>
      <textarea 
        id="review-text" 
        rows="4" 
        class="w-full px-3 py-2 text-gray-700 dark:text-gray-300 border rounded-lg focus:outline-none focus:ring-2 focus:ring-jamie-orange dark:bg-gray-700"
        placeholder="Share your experience with this recipe..."></textarea>
    </div>
    <button class="bg-jamie-orange hover:bg-opacity-90 text-white font-semibold py-2 px-4 rounded-lg">
      Submit Review
    </button>
  </div>

  <!-- Existing Reviews -->
  {reviews && reviews.length > 0 ? (
    <div class="space-y-6">
      {reviews.map(review => (
        <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6">
          <div class="flex justify-between items-start mb-4">
            <div>
              <div class="flex items-center mb-1">
                {Array.from({ length: 5 }).map((_, i) => (
                  <svg 
                    class={`w-4 h-4 ${i < review.rating ? 'text-yellow-400' : 'text-gray-300 dark:text-gray-500'}`}
                    fill="currentColor" 
                    viewBox="0 0 20 20" 
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                  </svg>
                ))}
              </div>
              <p class="font-medium text-gray-900 dark:text-white">User {review.userId}</p>
            </div>
            <span class="text-sm text-gray-500 dark:text-gray-400">{review.date}</span>
          </div>
          <p class="text-gray-700 dark:text-gray-300">{review.comment}</p>
        </div>
      ))}
    </div>
  ) : (
    <div class="text-center py-8 bg-gray-50 dark:bg-gray-800 rounded-lg">
      <p class="text-gray-600 dark:text-gray-400">No reviews yet. Be the first to review this recipe!</p>
    </div>
  )}
</section>

<script>
  // Form submission handler
  const reviewForm = document.querySelector('button');
  reviewForm?.addEventListener('click', (e) => {
    e.preventDefault();
    const reviewText = document.getElementById('review-text') as HTMLTextAreaElement;
    const ratingValue = document.getElementById('rating-stars')?.getAttribute('data-rating') || '0';
    
    console.log(`Submitting review with rating: ${ratingValue} and text: ${reviewText?.value}`);
    
    // Here you would typically send the review to your backend
    // For now, just show a success message
    if (reviewText) {
      reviewText.value = '';
      alert('Thank you for your review!');
    }
  });
</script>
