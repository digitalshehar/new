---
import { recipes } from '../../data/recipes';

// Get the trending recipes by sorting them based on rating and totalRatings
const trendingRecipes = Object.values(recipes)
  .filter(recipe => recipe.rating && recipe.totalRatings)
  .sort((a, b) => {
    // Calculate a trending score based on rating and number of ratings
    const scoreA = (a.rating || 0) * Math.log10((a.totalRatings || 0) + 1);
    const scoreB = (b.rating || 0) * Math.log10((b.totalRatings || 0) + 1);
    return scoreB - scoreA;
  })
  .slice(0, 3); // Get the top 3 trending recipes
---

<div class="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-lg">
  <div class="px-4 py-5 sm:px-6">
    <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white">Trending Now</h3>
    <p class="mt-1 max-w-2xl text-sm text-gray-500 dark:text-gray-400">Recipes that are popular with our community</p>
  </div>
  
  <div class="overflow-hidden">
    <div class="trending-carousel relative">
      <div class="trending-track flex transition-transform duration-500 ease-in-out">
        {trendingRecipes.map((recipe, index) => (
          <div class="trending-slide min-w-full px-4 py-5 sm:px-6">
            <div class="flex flex-col md:flex-row gap-6">
              <div class="md:w-1/3 relative rounded-xl overflow-hidden">
                <img 
                  src={recipe.image} 
                  alt={recipe.title} 
                  class="w-full aspect-[4/3] object-cover"
                />
                <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
                <div class="absolute bottom-3 left-3 flex items-center">
                  <div class="bg-white dark:bg-gray-900 rounded-full px-2 py-1 flex items-center text-xs font-medium">
                    <svg class="w-3 h-3 text-yellow-400 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                    </svg>
                    <span class="text-gray-900 dark:text-white">{recipe.rating?.toFixed(1)}</span>
                    <span class="text-gray-500 dark:text-gray-400 ml-1">({recipe.totalRatings})</span>
                  </div>
                </div>
              </div>
              <div class="md:w-2/3 flex flex-col">
                <h4 class="text-xl font-bold text-gray-900 dark:text-white mb-2">{recipe.title}</h4>
                <p class="text-gray-600 dark:text-gray-400 mb-3 line-clamp-3">{recipe.description}</p>
                <div class="flex items-center mb-4 text-sm">
                  <div class="flex items-center mr-4">
                    <svg class="w-4 h-4 text-gray-400 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>{recipe.cookingTime}</span>
                  </div>
                  <div class="flex items-center mr-4">
                    <svg class="w-4 h-4 text-gray-400 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
                    </svg>
                    <span>Serves {recipe.serves}</span>
                  </div>
                  <div class="flex items-center">
                    <svg class="w-4 h-4 text-gray-400 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
                    </svg>
                    <span>{recipe.totalRatings} {recipe.totalRatings === 1 ? 'review' : 'reviews'}</span>
                  </div>
                </div>
                <div class="mt-auto">
                  <div class="flex items-center justify-between">
                    <div class="flex flex-wrap gap-2">
                      {recipe.dietaryPreferences?.slice(0, 2).map(pref => (
                        <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-full text-xs text-gray-800 dark:text-gray-200">
                          {pref}
                        </span>
                      ))}
                    </div>
                    <a 
                      href={`/recipes/${recipe.slug}`} 
                      class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-jamie-orange hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-jamie-orange"
                    >
                      View Recipe
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                      </svg>
                    </a>
                  </div>
                </div>
              </div>
            </div>
            <div class="mt-4 flex justify-center">
              {trendingRecipes.map((_, i) => (
                <button 
                  class={`h-2 w-2 rounded-full mx-1 ${i === index ? 'bg-jamie-orange' : 'bg-gray-300 dark:bg-gray-600'}`}
                  data-index={i}
                  aria-label={`Go to slide ${i + 1}`}
                ></button>
              ))}
            </div>
          </div>
        ))}
      </div>
      
      <button class="carousel-prev absolute top-1/2 left-2 transform -translate-y-1/2 bg-white dark:bg-gray-800 rounded-full p-2 shadow-md z-10">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-700 dark:text-gray-300" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
        </svg>
      </button>
      <button class="carousel-next absolute top-1/2 right-2 transform -translate-y-1/2 bg-white dark:bg-gray-800 rounded-full p-2 shadow-md z-10">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-700 dark:text-gray-300" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  // Simple carousel functionality
  let currentSlide = 0;
  const track = document.querySelector('.trending-track');
  const slides = document.querySelectorAll('.trending-slide');
  const dots = document.querySelectorAll('[data-index]');
  const prevButton = document.querySelector('.carousel-prev');
  const nextButton = document.querySelector('.carousel-next');
  
  function goToSlide(index) {
    if (index < 0) index = slides.length - 1;
    if (index >= slides.length) index = 0;
    
    currentSlide = index;
    track.style.transform = `translateX(-${index * 100}%)`;
    
    // Update active dot
    dots.forEach((dot, i) => {
      if (i === index) {
        dot.classList.remove('bg-gray-300', 'dark:bg-gray-600');
        dot.classList.add('bg-jamie-orange');
      } else {
        dot.classList.remove('bg-jamie-orange');
        dot.classList.add('bg-gray-300', 'dark:bg-gray-600');
      }
    });
  }
  
  // Add event listeners
  prevButton.addEventListener('click', () => {
    goToSlide(currentSlide - 1);
  });
  
  nextButton.addEventListener('click', () => {
    goToSlide(currentSlide + 1);
  });
  
  dots.forEach((dot) => {
    dot.addEventListener('click', () => {
      const index = parseInt(dot.getAttribute('data-index'));
      goToSlide(index);
    });
  });
  
  // Auto-advance the carousel every 5 seconds
  setInterval(() => {
    goToSlide(currentSlide + 1);
  }, 5000);
</script>
