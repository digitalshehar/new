---
import { recipes } from '../../data/recipes';

// Mock user preferences - in a real app, these would come from the user's profile
const userPreferences = {
  favoriteCategories: ['Main', 'Breakfast', 'Indian'],
  dietaryPreferences: ['Vegetarian'],
  seasonalPreference: 'Summer' // Current season
};

// Filter recipes based on user preferences
const recommendedRecipes = Object.values(recipes)
  .filter(recipe => {
    // Check if matches user's dietary preferences
    const dietaryMatch = recipe.dietaryPreferences?.some(pref => 
      userPreferences.dietaryPreferences.includes(pref)
    );
    
    // Check if matches user's favorite categories
    const categoryMatch = userPreferences.favoriteCategories.includes(recipe.category);
    
    // Check if matches current season
    const seasonMatch = recipe.season === userPreferences.seasonalPreference || recipe.season === 'All';
    
    // Recipe is recommended if it matches dietary preferences AND (category OR season)
    return dietaryMatch && (categoryMatch || seasonMatch);
  })
  .slice(0, 4); // Limit to 4 recommendations
---

<div class="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-lg motion-intersect" data-motion-once="true">
  <div class="px-4 py-5 sm:px-6">
    <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white">Recommended For You</h3>
    <p class="mt-1 max-w-2xl text-sm text-gray-500 dark:text-gray-400">Personalized recipes based on your preferences</p>
  </div>
  
  <div class="px-4 py-5">
    {recommendedRecipes.length > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4" data-motion-stagger data-motion-delay="100">
        {recommendedRecipes.map(recipe => (
          <div class="recommendation-card motion-item card-3d bg-gray-50 dark:bg-gray-700 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-all duration-300">
            <div class="relative">
              <img 
                src={recipe.image} 
                alt={recipe.title} 
                class="w-full h-40 object-cover"
                loading="lazy"
              />
              <div class="absolute top-0 right-0 mt-2 mr-2 animate-fadeIn" style="animation-delay: 400ms;">
                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-white dark:bg-gray-900 text-gray-800 dark:text-gray-200">
                  <svg class="w-3 h-3 text-yellow-400 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                  </svg>
                  {recipe.rating?.toFixed(1) || 'N/A'}
                </span>
              </div>
              <div class="absolute bottom-0 left-0 right-0 p-2 bg-gradient-to-t from-black to-transparent">
                <div class="flex flex-wrap gap-1">
                  {recipe.dietaryPreferences?.slice(0, 2).map(pref => (
                    <span class="px-1.5 py-0.5 bg-jamie-orange bg-opacity-90 rounded text-xs text-white animate-fadeIn" style={`animation-delay: 500ms`}>
                      {pref}
                    </span>
                  ))}
                </div>
              </div>
            </div>
            <div class="p-4">
              <h4 class="font-semibold text-gray-900 dark:text-white mb-1 truncate">{recipe.title}</h4>
              <p class="text-xs text-gray-500 dark:text-gray-400 mb-2">
                {recipe.cookingTime} â€¢ {recipe.category}
              </p>
              <div class="recommendation-reason text-xs font-medium text-jamie-orange mb-3">
                {userPreferences.dietaryPreferences.some(pref => recipe.dietaryPreferences?.includes(pref)) ? 
                  `Matches your ${userPreferences.dietaryPreferences.join(', ')} preference` : 
                  userPreferences.favoriteCategories.includes(recipe.category) ? 
                    `From your favorite ${recipe.category} category` : 
                    `Perfect for ${userPreferences.seasonalPreference}`
                }
              </div>
              <div class="flex justify-between items-center mt-2">
                <button class="save-for-later text-xs text-gray-500 dark:text-gray-400 hover:text-jamie-orange dark:hover:text-jamie-orange flex items-center transition-colors">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
                  </svg>
                  Save
                </button>
                <a 
                  href={`/recipes/${recipe.slug}`} 
                  class="inline-flex items-center px-2 py-1 text-xs font-medium text-white bg-jamie-orange rounded hover:bg-opacity-90 transition-colors btn-pulse"
                >
                  View Recipe
                </a>
              </div>
            </div>
          </div>
        ))}
      </div>
    ) : (
      <div class="text-center py-10 motion-intersect" data-motion-once="true">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400 animate-float" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
        </svg>
        <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white animate-fadeIn" style="animation-delay: 200ms;">No recommendations yet</h3>
        <p class="mt-1 text-sm text-gray-500 dark:text-gray-400 animate-fadeIn" style="animation-delay: 400ms;">
          We're still learning your preferences. Try exploring more recipes!
        </p>
        <div class="mt-6 animate-fadeIn" style="animation-delay: 600ms;">
          <a 
            href="/recipes" 
            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-jamie-orange hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-jamie-orange btn-pulse"
          >
            Explore Recipes
          </a>
        </div>
      </div>
    )}
  </div>
</div>

<script>
  // Handle save for later functionality
  const saveButtons = document.querySelectorAll('.save-for-later');
  
  saveButtons.forEach(button => {
    button.addEventListener('click', () => {
      const card = button.closest('.recommendation-card');
      
      // Toggle saved state with animation
      button.classList.toggle('text-jamie-orange');
      card.classList.add('pulse');
      
      // Show notification
      showNotification('Recipe saved for later');
      
      // Remove pulse animation after it completes
      setTimeout(() => {
        card.classList.remove('pulse');
      }, 1000);
    });
  });
  
  // Notification function
  function showNotification(message) {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = 'fixed bottom-4 right-4 bg-gray-900 text-white px-4 py-2 rounded-lg shadow-lg transform translate-y-10 opacity-0 transition-all duration-500 z-50';
    notification.textContent = message;
    
    // Add to page
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
      notification.classList.remove('translate-y-10', 'opacity-0');
      
      // Add scale animation
      notification.classList.add('animate-scale');
    }, 100);
    
    // Animate out and remove
    setTimeout(() => {
      notification.classList.add('translate-y-10', 'opacity-0');
      setTimeout(() => {
        notification.remove();
      }, 500);
    }, 3000);
  }
  
  // Add mousemove event for 3D card effect
  document.querySelectorAll('.card-3d').forEach(card => {
    card.addEventListener('mousemove', e => {
      const cardRect = card.getBoundingClientRect();
      const cardCenterX = cardRect.left + cardRect.width / 2;
      const cardCenterY = cardRect.top + cardRect.height / 2;
      const mouseX = e.clientX - cardCenterX;
      const mouseY = e.clientY - cardCenterY;
      
      // Calculate rotation based on mouse position
      const rotateY = (mouseX / (cardRect.width / 2)) * 5; // max 5deg
      const rotateX = -(mouseY / (cardRect.height / 2)) * 5; // max 5deg
      
      // Apply transform
      card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(0)`;
    });
    
    // Reset transform on mouseout
    card.addEventListener('mouseleave', () => {
      card.style.transform = 'perspective(1000px) rotateX(0) rotateY(0) translateZ(0)';
    });
  });
</script>

<style>
  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(234, 88, 12, 0.7);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(234, 88, 12, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(234, 88, 12, 0);
    }
  }
  
  .pulse {
    animation: pulse 1s;
  }
</style>
