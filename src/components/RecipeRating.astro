---
interface Props {
  rating?: number;
  totalRatings?: number;
  interactive?: boolean;
}

const { rating = 0, totalRatings = 0, interactive = false } = Astro.props;
---

<div class="flex items-center justify-between mb-8 bg-gray-50 dark:bg-gray-800 p-4 rounded-lg">
  <div class="flex items-center">
    <div class="flex items-center mr-2 relative" id="rating-stars">
      {Array.from({ length: 5 }).map((_, i) => (
        <svg 
          class={`w-5 h-5 ${i < rating ? 'text-yellow-400' : 'text-gray-300 dark:text-gray-500'} ${interactive ? 'cursor-pointer transition-colors duration-200' : ''}`}
          data-rating-value={i + 1}
          fill="currentColor" 
          viewBox="0 0 20 20" 
          xmlns="http://www.w3.org/2000/svg"
        >
          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
        </svg>
      ))}
    </div>
    <p class="text-sm text-gray-600 dark:text-gray-400">
      {rating ? `${rating.toFixed(1)} out of 5` : 'No ratings yet'} 
      {totalRatings ? `(${totalRatings} ${totalRatings === 1 ? 'review' : 'reviews'})` : ''}
    </p>
  </div>
  <a href="#reviews" class="text-sm text-jamie-orange hover:underline focus:outline-none">Add your review</a>
</div>

{interactive && (
  <script>
    // For interactive rating (when user wants to rate)
    const stars = document.querySelectorAll('#rating-stars svg');
    
    stars.forEach((star, index) => {
      star.addEventListener('mouseover', () => {
        // Highlight current star and all stars before it
        for (let i = 0; i <= index; i++) {
          stars[i].classList.remove('text-gray-300', 'dark:text-gray-500');
          stars[i].classList.add('text-yellow-400');
        }
        // Un-highlight all stars after it
        for (let i = index + 1; i < stars.length; i++) {
          stars[i].classList.remove('text-yellow-400');
          stars[i].classList.add('text-gray-300', 'dark:text-gray-500');
        }
      });
      
      star.addEventListener('mouseout', () => {
        // Reset to original state on mouseout (based on actual rating)
        stars.forEach((s, i) => {
          const ratingValue = parseFloat(document.getElementById('rating-stars').getAttribute('data-rating') || '0');
          if (i < ratingValue) {
            s.classList.remove('text-gray-300', 'dark:text-gray-500');
            s.classList.add('text-yellow-400');
          } else {
            s.classList.remove('text-yellow-400');
            s.classList.add('text-gray-300', 'dark:text-gray-500');
          }
        });
      });
      
      star.addEventListener('click', () => {
        const ratingValue = parseInt(star.getAttribute('data-rating-value') || '0');
        document.getElementById('rating-stars').setAttribute('data-rating', ratingValue.toString());
        // Here you would typically send this rating to your backend
        console.log(`User rated: ${ratingValue}`);
      });
    });
  </script>
)}
