---
import { DietaryPreference, Season, TimeCategory } from '../../data/recipes';

interface Props {
  recipe?: any;
  mode: 'create' | 'edit';
}

const { recipe, mode } = Astro.props;

const formTitle = mode === 'create' ? 'Create New Recipe' : 'Edit Recipe';
const buttonText = mode === 'create' ? 'Create Recipe' : 'Update Recipe';
const formAction = mode === 'create' ? '/api/admin/recipes/create' : `/api/admin/recipes/update`;

const dietaryOptions: DietaryPreference[] = ['Vegetarian', 'Vegan', 'Gluten-free', 'None'];
const timeOptions: TimeCategory[] = ['Under 30 mins', '30-60 mins', 'Over 60 mins'];
const seasonOptions: Season[] = ['Spring', 'Summer', 'Autumn', 'Winter', 'All'];
const difficulties = ['Easy', 'Medium', 'Hard'];
const categories = [
  'Breakfast',
  'Lunch',
  'Dinner',
  'Desserts',
  'Snacks',
  'Baking',
  'Vegetarian',
  'Vegan',
  'Seafood',
  'Meat',
  'Pasta',
  'Soups',
  'Salads',
  'Special Occasions'
];
---

<div class="bg-white dark:bg-gray-800 shadow sm:rounded-lg">
  <div class="px-4 py-5 sm:p-6">
    <h3 class="text-lg font-medium leading-6 text-gray-900 dark:text-white">{formTitle}</h3>
    
    <form id="recipeForm" method="POST" action={formAction} class="mt-5 grid grid-cols-1 gap-y-6 sm:grid-cols-6 gap-x-4">
      {mode === 'edit' && (
        <input type="hidden" name="slug" value={recipe?.slug || ''} />
      )}
      
      <!-- Title -->
      <div class="sm:col-span-6">
        <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Title</label>
        <div class="mt-1">
          <input
            type="text"
            name="title"
            id="title"
            value={recipe?.title || ''}
            required
            class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
          />
        </div>
      </div>

      <!-- Description -->
      <div class="sm:col-span-6">
        <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Description</label>
        <div class="mt-1">
          <textarea
            id="description"
            name="description"
            rows="3"
            required
            class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
          >{recipe?.description || ''}</textarea>
        </div>
      </div>

      <!-- Image URL -->
      <div class="sm:col-span-6">
        <label for="image" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Image URL</label>
        <div class="mt-1">
          <input
            type="text"
            name="image"
            id="image"
            value={recipe?.image || ''}
            class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
          />
        </div>
      </div>

      <!-- Category -->
      <div class="sm:col-span-3">
        <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Category</label>
        <div class="mt-1">
          <select
            id="category"
            name="category"
            required
            class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
          >
            <option value="">Select a category</option>
            {categories.map((cat) => (
              <option value={cat} selected={recipe?.category === cat}>{cat}</option>
            ))}
          </select>
        </div>
      </div>

      <!-- Difficulty -->
      <div class="sm:col-span-3">
        <label for="difficulty" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Difficulty</label>
        <div class="mt-1">
          <select
            id="difficulty"
            name="difficulty"
            required
            class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
          >
            <option value="">Select difficulty</option>
            {difficulties.map((diff) => (
              <option value={diff} selected={recipe?.difficulty === diff}>{diff}</option>
            ))}
          </select>
        </div>
      </div>

      <!-- Cooking Time -->
      <div class="sm:col-span-2">
        <label for="cookingTime" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Cooking Time</label>
        <div class="mt-1">
          <input
            type="text"
            name="cookingTime"
            id="cookingTime"
            value={recipe?.cookingTime || ''}
            required
            class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
            placeholder="e.g. 30 minutes"
          />
          <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Include 'minutes' or 'hours' in your time</p>
        </div>
      </div>

      <!-- Prep Time -->
      <div class="sm:col-span-2">
        <label for="prepTime" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Prep Time</label>
        <div class="mt-1">
          <input
            type="text"
            name="prepTime"
            id="prepTime"
            value={recipe?.prepTime || ''}
            required
            class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
            placeholder="e.g. 15 minutes"
          />
          <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Include 'minutes' or 'hours' in your time</p>
        </div>
      </div>

      <!-- Servings -->
      <div class="sm:col-span-2">
        <label for="serves" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Serves</label>
        <div class="mt-1">
          <input
            type="text"
            name="serves"
            id="serves"
            value={recipe?.serves || ''}
            required
            class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
            placeholder="e.g. 4"
          />
        </div>
      </div>

      <!-- Time Category -->
      <div class="sm:col-span-3">
        <label for="timeCategory" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Time Category</label>
        <div class="mt-1">
          <select
            id="timeCategory"
            name="timeCategory"
            required
            class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
          >
            <option value="">Select time category</option>
            {timeOptions.map((time) => (
              <option value={time} selected={recipe?.timeCategory === time}>{time}</option>
            ))}
          </select>
        </div>
      </div>

      <!-- Season -->
      <div class="sm:col-span-3">
        <label for="season" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Season</label>
        <div class="mt-1">
          <select
            id="season"
            name="season"
            required
            class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
          >
            <option value="">Select season</option>
            {seasonOptions.map((season) => (
              <option value={season} selected={recipe?.season === season}>{season}</option>
            ))}
          </select>
        </div>
      </div>

      <!-- Dietary Preferences -->
      <div class="sm:col-span-6">
        <fieldset>
          <legend class="text-sm font-medium text-gray-700 dark:text-gray-300">Dietary Preferences</legend>
          <div class="mt-2 space-y-2">
            {dietaryOptions.map((option) => (
              <div class="flex items-center">
                <input
                  id={`dietary-${option}`}
                  name="dietaryPreferences"
                  type="checkbox"
                  value={option}
                  checked={recipe?.dietaryPreferences?.includes(option)}
                  class="h-4 w-4 text-amber-600 focus:ring-amber-500 border-gray-300 rounded dark:border-gray-600 dark:bg-gray-700"
                />
                <label for={`dietary-${option}`} class="ml-2 text-sm text-gray-700 dark:text-gray-300">
                  {option}
                </label>
              </div>
            ))}
          </div>
        </fieldset>
      </div>

      <!-- Ingredients -->
      <div class="sm:col-span-6">
        <label for="ingredients" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Ingredients (one per line)</label>
        <div class="mt-1">
          <textarea
            id="ingredients"
            name="ingredients"
            rows="6"
            required
            class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
            placeholder="200g flour&#10;2 eggs&#10;100ml milk"
          >{recipe?.ingredients?.join('\n') || ''}</textarea>
        </div>
      </div>

      <!-- Method -->
      <div class="sm:col-span-6">
        <label for="method" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Method (one step per line)</label>
        <div class="mt-1">
          <textarea
            id="method"
            name="method"
            rows="6"
            required
            class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
            placeholder="Preheat oven to 180°C&#10;Mix flour and sugar in a bowl&#10;Add eggs and milk, then whisk until smooth"
          >{recipe?.method?.join('\n') || ''}</textarea>
        </div>
      </div>

      <!-- Tips -->
      <div class="sm:col-span-6">
        <label for="tips" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Tips (one tip per line, optional)</label>
        <div class="mt-1">
          <textarea
            id="tips"
            name="tips"
            rows="3"
            class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
            placeholder="For a lighter texture, sift the flour&#10;Can be made in advance and refrigerated&#10;Serve with fresh berries"
          >{recipe?.tips?.join('\n') || ''}</textarea>
        </div>
      </div>

      <!-- Nutrition Info -->
      <div class="sm:col-span-6">
        <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Nutrition Information (optional)</h4>
        <div class="grid grid-cols-1 gap-y-6 sm:grid-cols-4 gap-x-4">
          <div>
            <label for="calories" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Calories</label>
            <div class="mt-1">
              <input
                type="text"
                name="calories"
                id="calories"
                value={recipe?.nutritionInfo?.calories || ''}
                class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
                placeholder="e.g. 350 kcal"
              />
            </div>
          </div>
          <div>
            <label for="protein" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Protein</label>
            <div class="mt-1">
              <input
                type="text"
                name="protein"
                id="protein"
                value={recipe?.nutritionInfo?.protein || ''}
                class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
                placeholder="e.g. 12g"
              />
            </div>
          </div>
          <div>
            <label for="carbs" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Carbs</label>
            <div class="mt-1">
              <input
                type="text"
                name="carbs"
                id="carbs"
                value={recipe?.nutritionInfo?.carbs || ''}
                class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
                placeholder="e.g. 45g"
              />
            </div>
          </div>
          <div>
            <label for="fat" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Fat</label>
            <div class="mt-1">
              <input
                type="text"
                name="fat"
                id="fat"
                value={recipe?.nutritionInfo?.fat || ''}
                class="shadow-sm focus:ring-amber-500 focus:border-amber-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
                placeholder="e.g. 15g"
              />
            </div>
          </div>
        </div>
      </div>

      <!-- Submit Button -->
      <div class="sm:col-span-6 flex justify-end space-x-3">
        <a 
          href="/admin/recipes"
          class="inline-flex justify-center py-2 px-4 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500"
        >
          Cancel
        </a>
        <button
          type="submit"
          class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-jamie-orange hover:bg-amber-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500"
        >
          {buttonText}
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  // Client-side form handling
  const form = document.getElementById('recipeForm');
  
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const formDataObj = Object.fromEntries(formData.entries());
    
    // Handle multi-select inputs
    const dietaryPreferences = formData.getAll('dietaryPreferences');
    
    // Process textarea input into arrays
    const ingredients = formData.get('ingredients')?.toString().split('\n').filter(i => i.trim() !== '') || [];
    const method = formData.get('method')?.toString().split('\n').filter(m => m.trim() !== '') || [];
    const tips = formData.get('tips')?.toString().split('\n').filter(t => t.trim() !== '') || [];
    
    // Format time strings to ensure they include units
    const cookingTime = formData.get('cookingTime')?.toString() || '';
    const prepTime = formData.get('prepTime')?.toString() || '';
    
    // Ensure time values include "minutes" or "hours"
    const formatTimeString = (timeStr) => {
      if (!timeStr) return '';
      if (timeStr.includes('minute') || timeStr.includes('hour')) return timeStr;
      // Check if it's a number
      return isNaN(Number(timeStr.trim())) ? timeStr : `${timeStr.trim()} minutes`;
    };
    
    // Build nutrition info
    const nutritionInfo = {
      calories: formData.get('calories') || '',
      protein: formData.get('protein') || '',
      carbs: formData.get('carbs') || '',
      fat: formData.get('fat') || ''
    };
    
    // Build the recipe object
    const recipeData = {
      ...formDataObj,
      ingredients,
      method,
      tips,
      nutritionInfo,
      dietaryPreferences,
      cookingTime: formatTimeString(cookingTime),
      prepTime: formatTimeString(prepTime)
    };
    
    try {
      const response = await fetch(form.action, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(recipeData),
      });
      
      if (response.ok) {
        const result = await response.json();
        window.location.href = '/admin/recipes';
      } else {
        const error = await response.json();
        alert(`Error: ${error.message || 'Failed to save recipe'}`);
      }
    } catch (error) {
      console.error('Error submitting recipe:', error);
      alert('An error occurred. Please try again.');
    }
  });
</script>
