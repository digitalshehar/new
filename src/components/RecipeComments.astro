---
interface Props {
  recipeId: string;
}

const { recipeId } = Astro.props;

// In a real app, these would come from a database
const sampleComments = [
  {
    id: '1',
    author: 'Sarah Johnson',
    avatar: '/images/avatars/avatar1.jpg',
    rating: 5,
    date: '2025-02-20',
    content: 'Absolutely delicious! Made this for my family and they loved it. The instructions were clear and easy to follow.',
    images: ['/images/comments/comment1-1.jpg', '/images/comments/comment1-2.jpg']
  },
  {
    id: '2',
    author: 'Mike Peterson',
    avatar: '/images/avatars/avatar2.jpg',
    rating: 4,
    date: '2025-02-18',
    content: 'Great recipe! I made a few modifications to suit my taste - added some extra garlic and used fresh herbs instead of dried. Turned out fantastic!',
    images: []
  }
];
---

<section class="mt-16 pt-8 border-t border-gray-200" id="comments">
  <h2 class="text-2xl font-bold text-jamie-blue mb-8">Comments & Reviews</h2>

  <!-- Comment Form -->
  <div class="bg-white rounded-lg shadow-md p-6 mb-8">
    <h3 class="text-lg font-semibold text-gray-900 mb-4">Leave a Review</h3>
    <form id="comment-form" class="space-y-4">
      <input type="hidden" name="recipeId" value={recipeId} />
      
      <!-- Rating -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Rating</label>
        <div class="flex gap-2">
          {Array.from({ length: 5 }).map((_, i) => (
            <button
              type="button"
              class="rating-star text-gray-400 hover:text-yellow-400 transition-colors"
              data-rating={i + 1}
            >
              <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
            </button>
          ))}
        </div>
      </div>

      <!-- Comment -->
      <div>
        <label for="comment" class="block text-sm font-medium text-gray-700 mb-1">Your Review</label>
        <textarea
          id="comment"
          name="comment"
          rows="4"
          class="block w-full rounded-md border-gray-300 shadow-sm focus:border-jamie-orange focus:ring-jamie-orange"
          placeholder="Share your experience with this recipe..."
          required
        ></textarea>
      </div>

      <!-- Image Upload -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Add Photos (optional)</label>
        <div class="flex items-center gap-4">
          <label class="cursor-pointer">
            <input
              type="file"
              multiple
              accept="image/*"
              class="hidden"
              id="image-upload"
            />
            <div class="w-20 h-20 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center text-gray-400 hover:border-jamie-orange hover:text-jamie-orange transition-colors">
              <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
              </svg>
            </div>
          </label>
          <div id="image-preview" class="flex gap-2"></div>
        </div>
      </div>

      <button
        type="submit"
        class="w-full bg-jamie-orange text-white py-2 px-4 rounded-md hover:bg-opacity-90 transition-colors"
      >
        Post Review
      </button>
    </form>
  </div>

  <!-- Comments List -->
  <div class="space-y-8">
    {sampleComments.map(comment => (
      <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex items-start gap-4">
          <img
            src={comment.avatar}
            alt={comment.author}
            class="w-12 h-12 rounded-full"
          />
          <div class="flex-1">
            <div class="flex items-center justify-between mb-2">
              <div>
                <h4 class="font-medium text-gray-900">{comment.author}</h4>
                <p class="text-sm text-gray-500">
                  {new Date(comment.date).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                </p>
              </div>
              <div class="flex text-yellow-400">
                {Array.from({ length: 5 }).map((_, i) => (
                  <svg
                    class="w-5 h-5"
                    fill={i < comment.rating ? "currentColor" : "none"}
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"
                    />
                  </svg>
                ))}
              </div>
            </div>
            <p class="text-gray-700 mb-4">{comment.content}</p>
            {comment.images.length > 0 && (
              <div class="flex gap-2 flex-wrap">
                {comment.images.map(image => (
                  <img
                    src={image}
                    alt="User uploaded photo"
                    class="w-24 h-24 object-cover rounded-lg cursor-pointer hover:opacity-90 transition-opacity"
                  />
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    ))}
  </div>
</section>

<script>
  class CommentSystem {
    private form: HTMLFormElement;
    private ratingStars: NodeListOf<HTMLButtonElement>;
    private imageUpload: HTMLInputElement;
    private imagePreview: HTMLDivElement;
    private selectedRating: number = 0;
    private selectedFiles: File[] = [];

    constructor() {
      this.form = document.getElementById('comment-form') as HTMLFormElement;
      this.ratingStars = document.querySelectorAll('.rating-star');
      this.imageUpload = document.getElementById('image-upload') as HTMLInputElement;
      this.imagePreview = document.getElementById('image-preview') as HTMLDivElement;

      this.initialize();
    }

    private initialize() {
      // Rating stars
      this.ratingStars.forEach(star => {
        star.addEventListener('click', () => this.handleRating(parseInt(star.dataset.rating || '0')));
        star.addEventListener('mouseenter', () => this.handleStarHover(parseInt(star.dataset.rating || '0')));
        star.addEventListener('mouseleave', () => this.handleStarHoverExit());
      });

      // Image upload
      this.imageUpload.addEventListener('change', () => this.handleImageUpload());

      // Form submission
      this.form.addEventListener('submit', (e) => this.handleSubmit(e));
    }

    private handleRating(rating: number) {
      this.selectedRating = rating;
      this.updateStars(rating);
    }

    private handleStarHover(rating: number) {
      this.updateStars(rating);
    }

    private handleStarHoverExit() {
      this.updateStars(this.selectedRating);
    }

    private updateStars(rating: number) {
      this.ratingStars.forEach((star, index) => {
        star.classList.toggle('text-yellow-400', index < rating);
        star.classList.toggle('text-gray-400', index >= rating);
      });
    }

    private handleImageUpload() {
      const files = Array.from(this.imageUpload.files || []);
      this.selectedFiles = [...this.selectedFiles, ...files];
      this.updateImagePreview();
    }

    private updateImagePreview() {
      this.imagePreview.innerHTML = '';
      
      this.selectedFiles.forEach((file, index) => {
        const reader = new FileReader();
        reader.onload = (e) => {
          const preview = document.createElement('div');
          preview.className = 'relative';
          preview.innerHTML = `
            <img src="${e.target?.result}" class="w-20 h-20 object-cover rounded-lg" />
            <button
              type="button"
              class="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-red-600"
              data-index="${index}"
            >
              Ã—
            </button>
          `;

          preview.querySelector('button')?.addEventListener('click', () => {
            this.selectedFiles.splice(index, 1);
            this.updateImagePreview();
          });

          this.imagePreview.appendChild(preview);
        };
        reader.readAsDataURL(file);
      });
    }

    private async handleSubmit(e: Event) {
      e.preventDefault();
      
      if (!this.selectedRating) {
        alert('Please select a rating');
        return;
      }

      const formData = new FormData(this.form);
      formData.append('rating', this.selectedRating.toString());
      this.selectedFiles.forEach(file => {
        formData.append('images[]', file);
      });

      try {
        const response = await fetch('/api/comments', {
          method: 'POST',
          body: formData
        });

        if (!response.ok) {
          throw new Error('Failed to submit comment');
        }

        // Refresh the page or update the comments list
        window.location.reload();
      } catch (error) {
        console.error('Error submitting comment:', error);
        alert('Failed to submit comment. Please try again.');
      }
    }
  }

  // Initialize comment system
  new CommentSystem();
</script>
