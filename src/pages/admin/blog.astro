---
import AdminLayout from '../../layouts/AdminLayout.astro';
import jwt from 'jsonwebtoken';
import fs from 'fs/promises';
import path from 'path';
import matter from 'gray-matter';

// Authentication check
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-this-in-production';
const token = Astro.cookies.get('auth_token')?.value;
let isAuthenticated = false;
let user = null;

if (token) {
  try {
    user = jwt.verify(token, JWT_SECRET);
    isAuthenticated = true;
    console.log('User authenticated:', user.username);
  } catch (error) {
    console.error('JWT verification failed:', error.message);
  }
}

// If not authenticated, redirect to login
if (!isAuthenticated) {
  return Astro.redirect('/admin/login');
}

// Get all blog posts
let blogPosts = [];
try {
  const blogDir = path.join(process.cwd(), 'src', 'pages', 'blog');
  
  try {
    await fs.access(blogDir);
  } catch (error) {
    // Create blog directory if it doesn't exist
    await fs.mkdir(blogDir, { recursive: true });
  }
  
  const files = await fs.readdir(blogDir);
  const mdFiles = files.filter(file => file.endsWith('.md'));
  
  for (const file of mdFiles) {
    const filePath = path.join(blogDir, file);
    const content = await fs.readFile(filePath, 'utf-8');
    const { data } = matter(content);
    
    blogPosts.push({
      title: data.title || 'Untitled',
      slug: data.slug || file.replace('.md', ''),
      date: data.date ? new Date(data.date).toLocaleDateString() : 'Unknown',
      author: data.author || 'Unknown',
      category: data.category || 'Uncategorized',
      status: data.status || 'published'
    });
  }
  
  // Sort posts by date (newest first)
  blogPosts.sort((a, b) => new Date(b.date) - new Date(a.date));
  
} catch (error) {
  console.error('Error reading blog posts:', error);
  blogPosts = [];
}
---

<AdminLayout title="Blog | Admin Dashboard">
  <div class="py-6">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 md:px-8">
      <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">Blog Management</h1>
    </div>
    
    <div class="mx-auto max-w-7xl mt-8 px-4 sm:px-6 md:px-8">
      <div class="flex justify-between items-center">
        <h2 class="text-lg font-medium text-gray-900 dark:text-white">Blog Posts</h2>
        <div>
          <a
            href="/admin/blog/new"
            class="inline-flex items-center rounded-md border border-transparent bg-jamie-orange px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-amber-600 focus:outline-none focus:ring-2 focus:ring-jamie-orange focus:ring-offset-2"
          >
            <svg class="-ml-1 mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
            </svg>
            New Blog Post
          </a>
        </div>
      </div>
      
      <!-- Blog post table -->
      <div class="mt-4 flex flex-col">
        <div class="-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
          <div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
            <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg">
              <table class="min-w-full divide-y divide-gray-300 dark:divide-gray-700">
                <thead class="bg-gray-50 dark:bg-gray-800">
                  <tr>
                    <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 dark:text-white sm:pl-6">Title</th>
                    <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white">Category</th>
                    <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white">Author</th>
                    <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white">Date</th>
                    <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white">Status</th>
                    <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
                      <span class="sr-only">Actions</span>
                    </th>
                  </tr>
                </thead>
                <tbody class="divide-y divide-gray-200 dark:divide-gray-700 bg-white dark:bg-gray-900">
                  {blogPosts.length === 0 ? (
                    <tr>
                      <td colspan="6" class="py-4 px-6 text-center text-sm text-gray-500 dark:text-gray-400">
                        No blog posts found. Create your first post!
                      </td>
                    </tr>
                  ) : (
                    blogPosts.map((post) => (
                      <tr>
                        <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 dark:text-white sm:pl-6">
                          {post.title}
                        </td>
                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400">{post.category}</td>
                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400">{post.author}</td>
                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400">{post.date}</td>
                        <td class="whitespace-nowrap px-3 py-4 text-sm">
                          <span class={`inline-flex rounded-full px-2 text-xs font-semibold leading-5 ${
                            post.status === 'published' 
                              ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100' 
                              : post.status === 'draft' 
                                ? 'bg-amber-100 text-amber-800 dark:bg-amber-800 dark:text-amber-100'
                                : 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100'
                          }`}>
                            {post.status.charAt(0).toUpperCase() + post.status.slice(1)}
                          </span>
                        </td>
                        <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                          <div class="flex justify-end space-x-2">
                            <a href={`/admin/blog/edit/${post.slug}`} class="text-jamie-orange hover:text-amber-700">
                              Edit
                            </a>
                            <button 
                              class="text-red-600 hover:text-red-900" 
                              data-post-slug={post.slug}
                              data-post-title={post.title}
                            >
                              Delete
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  // Handle blog post deletion
  document.addEventListener('DOMContentLoaded', () => {
    const deleteButtons = document.querySelectorAll('[data-post-slug]');
    
    deleteButtons.forEach((button) => {
      button.addEventListener('click', async () => {
        const slug = button.getAttribute('data-post-slug');
        const title = button.getAttribute('data-post-title');
        
        if (confirm(`Are you sure you want to delete the blog post "${title}"? This action cannot be undone.`)) {
          try {
            const response = await fetch('/api/admin/blog/delete', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ slug }),
            });
            
            if (response.ok) {
              // Reload the page to show updated blog post list
              window.location.reload();
            } else {
              const error = await response.json();
              alert(`Error: ${error.message || 'Failed to delete blog post'}`);
            }
          } catch (error) {
            console.error('Error deleting blog post:', error);
            alert('An error occurred while trying to delete the blog post.');
          }
        }
      });
    });
  });
</script>
