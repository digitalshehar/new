---
import AdminLayout from '../../../../layouts/AdminLayout.astro';
import AdvancedRecipeEditor from '../../../../components/admin/AdvancedRecipeEditor.astro';
import { recipes } from '../../../../data/recipes';
import jwt from 'jsonwebtoken';

// Authentication check
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-this-in-production';
const token = Astro.cookies.get('auth_token')?.value;
let isAuthenticated = false;
let user = null;

if (token) {
  try {
    user = jwt.verify(token, JWT_SECRET);
    isAuthenticated = true;
    console.log('User authenticated:', user.username);
  } catch (error) {
    console.error('JWT verification failed:', error.message);
  }
}

// If not authenticated, redirect to login
if (!isAuthenticated) {
  return Astro.redirect('/admin/login');
}

// Get recipe slug from params
const { slug } = Astro.params;

// Get recipe data
const recipe = recipes[slug];

// If recipe doesn't exist, redirect to recipes page
if (!recipe) {
  return Astro.redirect('/admin/recipes');
}

// Convert recipe for use with advanced editor
const advancedRecipe = {
  ...recipe,
  // Convert simple ingredient strings to structured format if needed
  ingredients: Array.isArray(recipe.ingredients) 
    ? recipe.ingredients.map((ing, index) => {
        // If it's already a structured ingredient object
        if (typeof ing === 'object' && ing.id) {
          return ing;
        }
        // Otherwise convert from string
        return {
          id: `ing_${Date.now()}_${index}`,
          amount: '',
          unit: '',
          name: ing.toString(),
          notes: ''
        };
      })
    : [],
  nutritionInfo: recipe.nutritionInfo || {
    calories: 0,
    servingSize: '',
    servingsPerRecipe: recipe.servings || 4
  }
};

// Mock recipe status data (in a real app, this would come from your database)
const recipeStatus = {
  status: recipe.isPublished ? 'published' : 'draft',
  scheduledDate: null,
  revisions: [
    {
      id: 'rev1',
      date: new Date(2025, 1, 15),
      author: user?.username || 'Admin',
      notes: 'Initial creation'
    },
    {
      id: 'rev2',
      date: new Date(2025, 1, 20),
      author: user?.username || 'Admin',
      notes: 'Updated ingredients and cooking time'
    }
  ]
};
---

<AdminLayout title={`Edit ${recipe.title} | Admin Dashboard`}>
  <div class="py-6">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 md:px-8">
      <div class="md:flex md:items-center md:justify-between">
        <div class="min-w-0 flex-1">
          <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">Edit Recipe</h1>
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Make changes to "{recipe.title}"</p>
        </div>
        <div class="mt-4 flex md:mt-0">
          <a href="/admin/recipes" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500">
            <svg class="-ml-1 mr-2 h-5 w-5 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Back to Recipes
          </a>
        </div>
      </div>
    </div>
    
    <div class="mx-auto max-w-7xl mt-6 px-4 sm:px-6 md:px-8">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Recipe Editor -->
        <div class="lg:col-span-2">
          <AdvancedRecipeEditor mode="edit" recipe={advancedRecipe} />
        </div>
        
        <!-- Recipe Publishing Panel -->
        <div class="lg:col-span-1">
          <div id="recipe-publishing-container" data-recipe-slug={slug} data-recipe-title={recipe.title}></div>
          
          <!-- Spacer - only on desktop -->
          <div class="mt-8 hidden lg:block"></div>
          
          <!-- Quick Actions Panel -->
          <div class="bg-white dark:bg-gray-800 shadow sm:rounded-lg mt-8">
            <div class="px-4 py-5 sm:p-6">
              <h3 class="text-lg font-medium leading-6 text-gray-900 dark:text-white">Quick Actions</h3>
              <div class="mt-5 grid grid-cols-1 gap-4">
                <button 
                  id="preview-recipe-button"
                  type="button"
                  class="inline-flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-white bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-jamie-orange"
                >
                  <svg class="-ml-1 mr-2 h-5 w-5 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                  Preview Recipe
                </button>
                
                <a 
                  href={`/recipes/${slug}`} 
                  target="_blank"
                  class="inline-flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-white bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-jamie-orange"
                >
                  <svg class="-ml-1 mr-2 h-5 w-5 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                  </svg>
                  View Live Recipe
                </a>
                
                <button 
                  id="delete-recipe-button"
                  type="button"
                  class="inline-flex items-center justify-center px-4 py-2 border border-red-300 dark:border-red-700 rounded-md shadow-sm text-sm font-medium text-red-700 dark:text-red-400 bg-white dark:bg-gray-700 hover:bg-red-50 dark:hover:bg-red-900/20 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                  data-recipe-slug={slug}
                  data-recipe-title={recipe.title}
                >
                  <svg class="-ml-1 mr-2 h-5 w-5 text-red-500 dark:text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                  Delete Recipe
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<!-- Recipe Preview Container - Will be populated by React -->
<div id="recipe-preview-container"></div>

<script>
  // Import from other files
  import React from 'react';
  import ReactDOM from 'react-dom/client';
  import RecipePublishing from '../../../../components/admin/RecipePublishing';
  import RecipePreview from '../../../../components/admin/RecipePreview';
  
  // Get recipe data for preview/publishing
  const slug = document.getElementById('recipe-publishing-container')?.dataset.recipeSlug;
  const title = document.getElementById('recipe-publishing-container')?.dataset.recipeTitle;
  
  // Handle recipe delete
  document.getElementById('delete-recipe-button')?.addEventListener('click', (e) => {
    const button = e.currentTarget as HTMLButtonElement;
    const slug = button.dataset.recipeSlug || '';
    const title = button.dataset.recipeTitle || '';
    
    if (confirm(`Are you sure you want to delete "${title}"? This action cannot be undone.`)) {
      // In a real application, you'd send a DELETE request to your API
      console.log(`Deleting recipe: ${title} (${slug})`);
      // Redirect to recipes list after deletion
      window.location.href = '/admin/recipes';
    }
  });
  
  // Mount the Recipe Publishing component
  const publishingContainer = document.getElementById('recipe-publishing-container');
  if (publishingContainer && slug && title) {
    const root = ReactDOM.createRoot(publishingContainer);
    root.render(
      React.createElement(RecipePublishing, {
        slug,
        title,
        initialStatus: 'draft',
        onPublish: (data) => {
          console.log('Publishing data:', data);
          // In a real app, you would save this data to your backend
          
          // Show success notification
          const notification = document.createElement('div');
          notification.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50 animate-fade-in';
          notification.textContent = `Recipe ${data.status === 'published' ? 'published' : 'updated'} successfully!`;
          document.body.appendChild(notification);
          
          // Remove notification after 3 seconds
          setTimeout(() => {
            notification.classList.add('animate-fade-out');
            setTimeout(() => notification.remove(), 500);
          }, 3000);
        },
        onPreview: () => {
          // Trigger the preview button click to open the preview modal
          document.getElementById('preview-recipe-button')?.click();
        }
      })
    );
  }
  
  // Handle recipe preview
  document.getElementById('preview-recipe-button')?.addEventListener('click', () => {
    // Get form data
    const form = document.getElementById('recipeForm') as HTMLFormElement;
    if (!form) return;
    
    // Create a FormData object to get all form values
    const formData = new FormData(form);
    
    // Create a recipe object from form data
    const recipe = {
      title: formData.get('title') as string || 'Untitled Recipe',
      description: formData.get('description') as string || '',
      image: formData.get('image') as string || undefined,
      prepTime: formData.get('prepTime') as string || undefined,
      cookingTime: formData.get('cookingTime') as string || undefined,
      totalTime: formData.get('totalTime') as string || undefined,
      serves: formData.get('serves') as string || undefined,
      difficulty: formData.get('difficulty') as string || undefined,
      // Simple conversion of textarea values to arrays
      ingredients: (formData.get('ingredients') as string || '').split('\n').filter(line => line.trim()),
      instructions: (formData.get('instructions') as string || '').split('\n').filter(line => line.trim()),
      category: formData.get('category') as string || undefined,
      notes: (formData.get('notes') as string || '').split('\n').filter(line => line.trim()),
      tips: (formData.get('tips') as string || '').split('\n').filter(line => line.trim()),
    };
    
    // Get container for preview
    const previewContainer = document.getElementById('recipe-preview-container');
    if (!previewContainer) return;
    
    // Mount the RecipePreview component
    const root = ReactDOM.createRoot(previewContainer);
    root.render(
      React.createElement(RecipePreview, {
        recipe,
        onClose: () => {
          // Clear the preview container when closed
          ReactDOM.createRoot(previewContainer).render(null);
        }
      })
    );
  });
</script>

<style>
  /* Animations for notifications and modals */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  @keyframes fadeOut {
    from { opacity: 1; transform: translateY(0); }
    to { opacity: 0; transform: translateY(10px); }
  }
  
  .animate-fade-in {
    animation: fadeIn 0.3s ease-out forwards;
  }
  
  .animate-fade-out {
    animation: fadeOut 0.3s ease-in forwards;
  }
</style>
