---
import AdminLayout from '../../layouts/AdminLayout.astro';
import RecipeCollections from '../../components/admin/RecipeCollections';

// Mock recipes data (will be replaced with API call)
const recipesResponse = await fetch('https://jsonplaceholder.typicode.com/posts')
  .then(response => response.json())
  .catch(error => {
    console.error('Error fetching recipes:', error);
    return [];
  });

// Transform the mock data to match our recipe structure
const recipes = recipesResponse.slice(0, 20).map((post, index) => ({
  id: `recipe-${index}`,
  title: post.title.substring(0, 30),
  description: post.body.substring(0, 100),
  categories: ['Dinner', 'Lunch', 'Breakfast'][Math.floor(Math.random() * 3)],
  cuisineType: ['Italian', 'American', 'Mexican', 'Asian', 'Mediterranean'][Math.floor(Math.random() * 5)],
  prepTime: Math.floor(Math.random() * 30) + 5,
  cookTime: Math.floor(Math.random() * 60) + 10,
  servings: Math.floor(Math.random() * 6) + 1,
  difficulty: ['Easy', 'Medium', 'Hard'][Math.floor(Math.random() * 3)],
  ingredients: [],
  instructions: [],
  nutritionFacts: {
    calories: Math.floor(Math.random() * 800) + 200,
    protein: Math.floor(Math.random() * 30) + 5,
    carbs: Math.floor(Math.random() * 50) + 10,
    fat: Math.floor(Math.random() * 30) + 5
  },
  image: `https://picsum.photos/seed/${index}/400/300`,
  publishedAt: new Date(Date.now() - Math.floor(Math.random() * 10000000000)).toISOString(),
  author: {
    id: 'author-1',
    name: 'Jamie Oliver',
    avatarUrl: 'https://randomuser.me/api/portraits/men/32.jpg'
  }
}));

// Mock collections data (will be replaced with API call)
const initialCollections = [
  {
    id: 'collection-1',
    name: 'Weeknight Dinners',
    slug: 'weeknight-dinners',
    description: 'Quick and easy meals perfect for busy weeknights.',
    featured: true,
    coverImage: 'https://picsum.photos/seed/weeknight/800/400',
    recipeIds: ['recipe-1', 'recipe-3', 'recipe-5', 'recipe-7'],
    createdAt: new Date(Date.now() - 5000000000).toISOString(),
    updatedAt: new Date(Date.now() - 1000000000).toISOString()
  },
  {
    id: 'collection-2',
    name: 'Healthy Lunches',
    slug: 'healthy-lunches',
    description: 'Nutritious and delicious recipes to fuel your day.',
    featured: false,
    coverImage: 'https://picsum.photos/seed/healthy/800/400',
    recipeIds: ['recipe-2', 'recipe-4', 'recipe-6'],
    createdAt: new Date(Date.now() - 4000000000).toISOString(),
    updatedAt: new Date(Date.now() - 2000000000).toISOString()
  },
  {
    id: 'collection-3',
    name: 'Weekend Baking',
    slug: 'weekend-baking',
    description: 'Sweet treats and savory bakes for your weekend projects.',
    featured: true,
    coverImage: 'https://picsum.photos/seed/baking/800/400',
    recipeIds: ['recipe-8', 'recipe-10', 'recipe-12'],
    createdAt: new Date(Date.now() - 3000000000).toISOString(),
    updatedAt: new Date(Date.now() - 500000000).toISOString()
  }
];

// Authentication check (placeholder - will be replaced with actual auth logic)
// In a real application, this would redirect unauthenticated users
const isAuthenticated = true;
const user = {
  id: 'user-1',
  name: 'Admin User',
  role: 'admin'
};

// If not authenticated in a real app:
// if (!isAuthenticated) {
//   return Astro.redirect('/login');
// }
---

<AdminLayout title="Recipe Collections | Fresh Food Weekly Admin" activeTab="collections">
  <div class="py-6">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 md:px-8">
      <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">Recipe Collections</h1>
    </div>
    <div class="max-w-7xl mx-auto px-4 sm:px-6 md:px-8">
      <div class="py-4">
        <RecipeCollections client:load recipes={recipes} initialCollections={initialCollections} />
      </div>
    </div>
  </div>
</AdminLayout>
