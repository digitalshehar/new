---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import RecipeCard from '../../components/RecipeCard.astro';
import { recipes } from '../../data/recipes';

// Convert recipes object to array and ensure proper image paths
const recipesList = Object.entries(recipes).map(([slug, recipe]) => {
  // Use a default image if the recipe image is missing or invalid
  const defaultImage = '/images/recipes/default-recipe.jpg';
  let imageUrl = recipe.image;

  // If the image path is relative, make it absolute
  if (imageUrl && !imageUrl.startsWith('http')) {
    imageUrl = imageUrl.startsWith('/') ? imageUrl : `/${imageUrl}`;
  }

  return {
    ...recipe,
    slug,
    image: imageUrl || defaultImage
  };
});

const categories = [
  "All",
  ...new Set(recipesList.map(recipe => recipe.category))
].filter(Boolean);

const featuredRecipe = recipesList.find(recipe => recipe.featured) || recipesList[0];
const otherRecipes = recipesList.filter(recipe => recipe !== featuredRecipe);
---

<Layout>
  <Navigation />
  
  <main class="pt-32 pb-16">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Hero Section -->
      <div class="text-center mb-12">
        <h1 class="text-4xl md:text-5xl font-bold text-jamie-blue mb-4">Jamie's Recipes</h1>
        <p class="text-xl text-gray-600 max-w-3xl mx-auto">
          Discover delicious, nutritious recipes that are easy to make and packed with flavor.
          From quick weeknight dinners to special occasions, we've got you covered.
        </p>
      </div>

      <!-- Search and Filter -->
      <div class="mb-12">
        <div class="max-w-2xl mx-auto mb-8">
          <div class="relative">
            <input
              type="search"
              id="recipe-search"
              placeholder="Search recipes..."
              class="w-full px-4 py-3 pl-12 rounded-lg border border-gray-300 focus:border-jamie-orange focus:ring-jamie-orange"
            />
            <svg
              class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
              />
            </svg>
          </div>
        </div>

        <div class="flex flex-wrap justify-center gap-4">
          {categories.map(category => (
            <button
              class="px-6 py-2 rounded-full text-jamie-blue border border-jamie-blue hover:bg-jamie-blue hover:text-white transition-colors"
              data-category={category}
            >
              {category}
            </button>
          ))}
        </div>
      </div>

      <!-- Featured Recipe -->
      <div class="mb-16">
        <h2 class="text-2xl font-bold text-jamie-blue mb-8">Featured Recipe</h2>
        <RecipeCard {...featuredRecipe} />
      </div>

      <!-- Recipe Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {otherRecipes.map(recipe => (
          <RecipeCard 
            data-title={recipe.title} 
            data-category={recipe.category} 
            data-description={recipe.description} 
            {...recipe} 
          />
        ))}
      </div>
    </div>
  </main>
</Layout>

<script>
  // Client-side search and filter functionality
  const searchInput = document.getElementById('recipe-search') as HTMLInputElement;
  const categoryButtons = document.querySelectorAll('[data-category]');
  const recipeCards = document.querySelectorAll('[data-recipe-card]');
  let currentCategory = 'All';

  function filterRecipes() {
    const searchTerm = searchInput.value.toLowerCase();
    
    recipeCards.forEach((card: HTMLElement) => {
      const title = card.getAttribute('data-title')?.toLowerCase() || '';
      const category = card.getAttribute('data-category')?.toLowerCase() || '';
      const description = card.getAttribute('data-description')?.toLowerCase() || '';
      
      const matchesSearch = 
        title.includes(searchTerm) || 
        description.includes(searchTerm);
      
      const matchesCategory = 
        currentCategory === 'All' || 
        category === currentCategory.toLowerCase();

      if (matchesSearch && matchesCategory) {
        card.style.display = 'block';
      } else {
        card.style.display = 'none';
      }
    });
  }

  searchInput.addEventListener('input', filterRecipes);

  categoryButtons.forEach(button => {
    button.addEventListener('click', (e) => {
      const clickedCategory = (e.target as HTMLElement).getAttribute('data-category') || 'All';
      
      // Update active state
      categoryButtons.forEach(btn => 
        btn.classList.toggle('bg-jamie-blue', 
          btn.getAttribute('data-category') === clickedCategory
        )
      );
      categoryButtons.forEach(btn => 
        btn.classList.toggle('text-white', 
          btn.getAttribute('data-category') === clickedCategory
        )
      );
      
      currentCategory = clickedCategory;
      filterRecipes();
    });
  });

  // Initialize with "All" category selected
  const allButton = document.querySelector('[data-category="All"]');
  if (allButton) {
    allButton.classList.add('bg-jamie-blue', 'text-white');
  }
</script>
